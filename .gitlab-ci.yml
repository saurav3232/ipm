stages:
  - build
  - test
  - create_image
  - deploy
  - health_check

variables:
  MAVEN_CLI_OPTS: "-B -DskipTests"

build:
  stage: build
  image: maven:3.9-eclipse-temurin-17
  script:
    - mvn $MAVEN_CLI_OPTS clean package
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 days

test:
  stage: test
  image: maven:3.9-eclipse-temurin-17
  script:
    - mvn test

create_image:
  stage: create_image
  image: docker:latest
  services:
    - docker:dind
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always   # Always build for the main branch
    - if: '$CI_COMMIT_BRANCH != "main"'
      when: always   # Build for any non-main branch
    - when: never    # Default: skip if no conditions match
  script:
    - |
      mkdir -p image;
      if [ "$CI_COMMIT_BRANCH" == "main" ]; then
        echo "Building Docker image for main branch...";
        docker build -t "$DOCKER_IMAGE_NAME" .;
        docker save "$DOCKER_IMAGE_NAME" -o image/main_${CI_PIPELINE_ID}_docker_image.tar;
      else
        echo "Building Docker image for non-main branch...";
        docker build -t "$LOCAL_IMAGE_NAME" .;
        docker save "$LOCAL_IMAGE_NAME" -o image/${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}_docker_image.tar;
      fi
  artifacts:
    paths:
      - Dockerfile
      - image/*.tar
    expire_in: 1 days

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual      # Trigger manually for the main branch
    - if: '$CI_COMMIT_BRANCH != "main"'
      when: on_success  # Trigger automatically for non-main branches
  before_script:
    - if [ "$CI_COMMIT_BRANCH" == "main" ]; then
      echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin;
      fi
  script:
    - |
      if [ "$CI_COMMIT_BRANCH" == "main" ]; then
        echo "Loading and pushing Docker image for main branch...";
        docker load -i image/main_${CI_PIPELINE_ID}_docker_image.tar;
        docker push $DOCKER_IMAGE_NAME;
      else
        echo "Loading local Docker image for non-main branch...";
        docker load -i image/${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}_docker_image.tar;
        echo "Non-main branch: Image not pushed to Docker Hub";
      fi

# Health Check Stage
health_check:
  stage: health_check
  image: docker:latest
  services:
    - docker:dind
  script:
    - apk add --no-cache curl  # Install curl
    - |
      # Load the image based on the branch
      if [ "$CI_COMMIT_BRANCH" == "main" ]; then
        echo "Loading Docker image for main branch...";
        docker load -i image/main_${CI_PIPELINE_ID}_docker_image.tar;
        IMAGE_NAME="$DOCKER_IMAGE_NAME";
      else
        echo "Loading Docker image for non-main branch...";
        docker load -i image/${CI_COMMIT_REF_SLUG}_${CI_PIPELINE_ID}_docker_image.tar;
        IMAGE_NAME="$LOCAL_IMAGE_NAME";
      fi

      # Run the image in a container and wait for it to be healthy
      echo "Starting Docker container for health check...";
      docker run -d --name health_check_container -p 8080:8080 $IMAGE_NAME;
      sleep 10;

      # # Check health endpoint
      echo "Checking health endpoint...";
      HEALTH_STATUS=$(curl --silent --max-time 30 http://localhost:8080/actuator/health_check)

      # # Print health status
      echo "Health check response: $HEALTH_STATUS";

      # # Fail the job if health check doesn't pass (i.e., non-200 response)
      if [[ "$HEALTH_STATUS" != *"UP"* ]]; then
        echo "Health check failed!";
        exit 1;
      fi

      # # Clean up by stopping and removing the container
      docker stop health_check_container;
      docker rm health_check_container;
